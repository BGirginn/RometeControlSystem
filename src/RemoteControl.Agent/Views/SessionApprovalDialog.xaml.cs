using System;
using System.Windows;
using System.Windows.Threading;
using RemoteControl.Protocol.Messages;

namespace RemoteControl.Agent.Views;

public partial class SessionApprovalDialog : Window
{
    private readonly RequestSessionMessage _sessionRequest;
    private readonly DispatcherTimer _countdownTimer;
    private int _remainingSeconds = 30;
    
    public bool? UserResponse { get; private set; }
    public string? DenyReason { get; private set; }

    public SessionApprovalDialog(RequestSessionMessage sessionRequest)
    {
        InitializeComponent();
        
        _sessionRequest = sessionRequest;
        
        // Populate UI with session request details
        ViewerUsernameText.Text = sessionRequest.Payload.ViewerUsername;
        ViewerMachineText.Text = sessionRequest.Payload.ViewerMachineName;
        RequestReasonText.Text = sessionRequest.Payload.RequestReason ?? "No reason provided";
        RequestTimeText.Text = sessionRequest.Timestamp.ToString("yyyy-MM-dd HH:mm:ss");
        SessionIdText.Text = sessionRequest.MessageId ?? "Generated by server";
        
        // Setup countdown timer
        _countdownTimer = new DispatcherTimer
        {
            Interval = TimeSpan.FromSeconds(1)
        };
        _countdownTimer.Tick += CountdownTimer_Tick;
        _countdownTimer.Start();
        
        // Focus the deny button by default for security
        DenyButton.Focus();
        
        // Play notification sound
        System.Media.SystemSounds.Exclamation.Play();
        
        // Flash window to get attention
        FlashWindow();
    }

    private void CountdownTimer_Tick(object? sender, EventArgs e)
    {
        _remainingSeconds--;
        CountdownText.Text = _remainingSeconds.ToString();
        
        if (_remainingSeconds <= 0)
        {
            _countdownTimer.Stop();
            AutoDeny();
        }
    }

    private void AllowButton_Click(object sender, RoutedEventArgs e)
    {
        UserResponse = true;
        _countdownTimer.Stop();
        DialogResult = true;
        Close();
    }

    private void DenyButton_Click(object sender, RoutedEventArgs e)
    {
        UserResponse = false;
        DenyReason = "Denied by user";
        _countdownTimer.Stop();
        DialogResult = false;
        Close();
    }

    private void AutoDeny()
    {
        UserResponse = false;
        DenyReason = "Auto-denied due to timeout";
        DialogResult = false;
        Close();
    }

    private void FlashWindow()
    {
        // Bring window to front and flash it
        if (WindowState == WindowState.Minimized)
        {
            WindowState = WindowState.Normal;
        }
        
        Activate();
        Topmost = true;
        Topmost = false;
        Focus();
    }

    protected override void OnClosed(EventArgs e)
    {
        _countdownTimer?.Stop();
        
        // If no response was set, default to deny
        if (UserResponse == null)
        {
            UserResponse = false;
            DenyReason = "Dialog closed without response";
        }
        
        base.OnClosed(e);
    }
} 